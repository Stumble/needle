// Code generated by vfsgen; DO NOT EDIT.

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templateAssets statically implements the virtual filesystem provided to vfsgen.
var templateAssets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 7, 27, 21, 28, 24, 976337847, time.UTC),
		},
		"/init.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "init.tmpl",
			modTime:          time.Date(2019, 7, 27, 21, 28, 24, 968337786, time.UTC),
			uncompressedSize: 940,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4f\x8f\x9a\x40\x18\xc6\xef\xfd\x14\x4f\xe7\xa4\x4d\x95\x4b\x9b\x34\x59\x70\x83\x3a\xee\x92\x50\x48\x74\x6c\x8f\x9b\x11\x5e\xea\x18\x66\xe8\x0e\x63\x53\xb3\xd9\xef\xde\x28\x60\xd0\x9a\xec\x65\x6f\xfc\x79\x78\xf8\xbd\x3f\x5e\x7c\x43\x94\x97\x34\xf9\x00\xf8\x75\xb6\x25\x2d\x61\xa4\xa6\x80\xbd\xbc\x8c\x85\xdc\x94\x94\x48\x4d\xaf\xaf\x0c\x5b\x95\xe7\x64\x16\x8a\xca\xbc\x0e\x18\x83\x96\xca\xa4\x9b\xdd\x29\x98\x6e\x76\x6d\xec\xd8\x73\x6c\x7a\x2e\x9b\x23\x60\xb6\xe4\xa1\xe0\x10\xe1\x34\xe6\xb8\x2c\xc5\xa0\xcd\x00\xfd\x92\x68\xde\x5c\x53\xc6\x21\x49\x05\x92\x75\x1c\xb7\xc1\x21\x4f\x1e\xa2\x84\x07\x91\x31\xd5\x7c\x8a\x39\x5f\x84\xeb\x58\x60\xf6\x18\x2e\x57\x5c\x04\x7b\x57\x7c\xd3\x9b\x2f\x98\xa5\x71\x1c\x0a\xde\x9d\x3f\xed\x8d\xca\xaa\x9c\x9e\x32\x75\xd7\xf0\x79\x67\x40\xff\xe3\x68\x04\x99\xe7\xb0\x54\x90\x25\x93\x51\x8d\x2d\x59\x82\x2a\xf0\xbc\x27\x7b\x40\x65\xa1\xf7\x4e\x3a\x55\x19\xec\x2a\x65\x28\x47\xe5\xb6\x64\xe1\x8e\x93\xd4\x63\x8c\x46\xbd\x2a\xdf\x52\x81\xda\x66\x01\x2b\xaa\xca\xdb\x48\x3b\xfe\xab\x4b\x36\xf1\x3d\x4b\xc5\xa4\x8d\xfa\x5e\x63\xba\x91\xee\xb4\xab\xdb\x82\xe6\x85\x8d\xff\x07\x72\x7d\x29\x35\x83\x3b\xfc\xa6\x80\x69\x69\x0e\x0c\x99\xcc\xb6\x34\xdf\xdb\x13\x56\xc0\xbe\x6a\xd6\xf9\xee\xbb\x07\x56\x3c\xe6\x33\x81\x4f\x58\x2c\xd3\xef\x57\xfa\xef\xba\x27\x7a\x36\xbc\x13\xc2\xdb\x38\xd3\x43\x34\xef\x88\x6a\x65\x7e\x95\xf4\x3e\x4c\xf8\xf9\xc8\x97\xfc\x7a\x1d\x02\xdc\xbf\x09\x7b\xfe\x46\x0d\x6f\x64\x6a\xb2\x17\xc8\x0c\xca\xfc\x91\xa5\xca\xa5\xbb\x3d\xcf\xe7\xff\x94\xdf\xe6\x8f\x92\x15\x5f\x0a\x44\x89\x48\xaf\xe8\xcf\x91\xc1\xe5\x00\xc3\xf3\x8d\x1f\x61\xbc\xe6\xab\xc1\xfd\xf0\xe6\x3c\xdd\x0c\xed\x92\x34\x9b\xe1\x7b\xdd\x2f\xfa\x2f\x00\x00\xff\xff\xee\xa5\x5a\xe9\xac\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/init.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
