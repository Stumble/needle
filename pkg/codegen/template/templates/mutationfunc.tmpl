func (s {{.RepoName}}) {{.MutationName}}{{.MutationSig}} {
	sql := {{.SQLVarName}}
    exec := s.getExec(options)
    arglist, inlens := args.arglist()
    sql, err := replaceInCond(sql, inlens...)
    if err != nil {
        return nil, err
    }
	rst, err := exec.Exec(ctx, sql, arglist...)
	if err != nil {
		return rst, err
	}
    if s.cache == nil {
        return rst, nil
    }
    {{ if  .Invalidates -}}
	_ = exec.Invalidate(func() error {
        var anyErr error
        {{ range .Invalidates -}}
        if {{.ArgName}} != nil {
            var err error
		    if {{.ValName}} != nil {
		    	err = s.cache.Set(ctx, {{.ArgName}}.Key(), {{.ValName}}, time.Duration({{.CacheDuration.Nanoseconds}}))
		    } else {
		    	err = s.cache.Invalidate(ctx, {{.ArgName}}.Key())
		    }
            if err != nil {
                anyErr = err
            }
        }
        {{ end -}}
        return anyErr
	})
    {{- end }}
	return rst, nil
}
