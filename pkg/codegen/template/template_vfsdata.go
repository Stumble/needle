// Code generated by vfsgen; DO NOT EDIT.

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templateAssets statically implements the virtual filesystem provided to vfsgen.
var templateAssets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 7, 19, 21, 7, 1, 527644645, time.UTC),
		},
		"/mutationfunc.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "mutationfunc.tmpl",
			modTime:          time.Date(2019, 7, 19, 21, 6, 17, 739368144, time.UTC),
			uncompressedSize: 794,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\xaa\xdb\x30\x10\x3c\x4b\x5f\xb1\xbd\xc9\xe0\xa7\x0f\x28\xe4\x50\xd2\x1e\x42\xdb\x40\x1b\xc8\xb5\x08\x79\xe3\x0a\x14\x39\x91\xe4\x92\x22\xf4\xef\x65\x25\xb9\xf1\x4b\x88\x0f\x06\xcf\xce\xcc\xce\xee\xfa\x34\x3b\x0d\x22\x40\x4a\xf2\x27\x5e\xa6\xbd\x3a\x63\xce\x1d\x7d\x7e\x9f\xa3\x8a\x66\x72\x15\x5a\x01\x07\x33\xe6\x0c\x89\xb3\x70\xb5\xf0\x71\x43\xdc\xc3\x8f\x6f\x47\xe5\x2b\x93\x03\x00\xe0\x0d\x35\xd5\x82\x1c\x31\x7e\xb9\xa1\x16\xd3\x85\xb4\xa1\x2b\x65\xe5\x47\x6b\x42\xec\xc1\x38\x8b\x2e\x10\x53\xf9\x31\xc8\x86\x8b\xca\x0a\x57\xdb\x03\x7a\x4f\x65\x8f\x17\xab\x34\xee\xdc\x76\x72\x83\x28\x95\xaa\x95\x52\x56\xb6\x39\x15\xee\x87\x0d\x38\x63\x21\x15\x8c\x1e\x8f\x71\xf6\x8e\xc0\x62\x56\xf0\xcc\x99\xa7\xf6\xcd\x9c\xd2\xca\x92\x52\xc7\x5b\x5f\xfb\xb6\x28\xc5\x9e\x3d\x7a\x33\xd6\x5c\x17\x17\xce\xf2\x12\x22\x48\xad\xf4\x6f\x84\xcd\x8b\x20\x45\xe2\x8c\x6d\x41\xe8\x9d\x12\x09\x41\xee\xdc\x1f\x65\xcd\xa0\x22\x06\x78\xcb\x99\xb3\x5f\xd0\xc2\xdd\x2b\x82\x2e\x26\xba\x95\x6f\x4a\xe0\x95\x1b\xf1\x59\xbf\x30\xcc\x89\x8e\xf4\xc9\x8f\xf5\x42\xcf\xd1\xee\xf1\xfe\x43\x99\x33\x56\x75\x47\x65\x9b\x6e\x35\x7f\x89\xd6\x46\x95\x07\x8c\x75\x73\xeb\x2e\xf2\x2b\xfe\x15\x5d\xff\xce\xa1\x87\x68\xce\x28\x3f\xcf\xbe\xfc\x49\x22\x25\xb9\x25\x87\x05\x90\x7b\xe5\xa6\x80\x7a\x72\x43\xc8\xb9\xeb\x38\x63\x19\xd0\x06\x7c\xee\xb9\xda\xc8\x8b\xd6\x45\xbd\xde\x12\xba\xa1\xae\x35\x77\x6d\xed\x6f\x05\x23\xe8\xf1\x38\x99\xff\x0b\x00\x00\xff\xff\x76\xd0\x86\x27\x1a\x03\x00\x00"),
		},
		"/queryfunc.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "queryfunc.tmpl",
			modTime:          time.Date(2019, 7, 19, 21, 7, 1, 523644620, time.UTC),
			uncompressedSize: 1763,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6b\xdc\x30\x10\x3d\x4b\xbf\x62\x7a\x09\x72\x71\x94\x7b\xcb\x1e\x4a\x1a\xda\xd0\xb0\x90\xa4\xf4\x52\x7a\x30\xf6\x78\x23\x70\xa4\x8d\x46\xdb\xdd\x20\xf4\xdf\x8b\x24\x7f\xed\x3a\x29\x21\xbe\xc9\x9a\x79\xf3\xe6\xcd\x1b\xb5\x3b\x5d\x83\x20\xf0\x5e\xde\xe1\xd6\xac\xab\x47\x0c\xa1\x88\xc7\xdb\x1d\xda\xe7\x7c\x1e\x4e\xf7\x6a\x13\x02\x78\x0e\x00\xe0\xfd\x39\xa8\x16\xe4\xb5\x56\xee\x8b\xdd\xd0\xcf\xe7\x2d\xc2\x79\x08\xe9\xb2\xb2\x1b\x82\x4f\x2b\x38\xf3\xfe\x28\x20\x04\x1f\xc6\x6c\xd4\x0d\xf4\xf1\x78\xc0\x3a\xc6\x93\xdc\xa0\xbb\x3a\x60\x2d\xcc\xd6\x29\xa3\xa9\xe8\xa3\x63\xa5\xcb\xaa\x7e\xc0\xaf\x3b\x5b\xc5\x9b\xb1\x54\xfc\xb4\xa9\xe3\x5d\x46\x50\x94\x02\xd7\xe6\x0e\xab\x66\xc2\x61\x31\x50\xb5\x40\x32\xc7\xae\x56\xa0\x55\x07\x3e\x5f\x30\x8b\x6e\x67\x35\x90\xf4\x5e\x7e\x57\x4d\x83\x7a\xd6\xbf\xa8\xdd\xa1\x4c\x24\xcb\xd4\x5a\x8f\x36\x11\xb0\xe4\x4a\x40\x6b\x33\x83\x54\x40\x7e\x43\x97\xf3\x62\x86\xfc\x81\xcf\xa2\x28\xc7\x84\x23\x05\xe9\x46\x91\x8b\x0d\x89\xdf\x7f\xe2\x1c\xc8\x45\xad\xfa\x51\x2c\x52\xb0\xa3\x24\xb4\xf8\xf8\x86\xd8\x24\xb1\xd0\xaa\x2b\x4a\x70\xea\x11\xe5\xa0\x9f\xf0\xfe\x58\x50\xb9\xae\xb4\x21\xac\x8d\x6e\x28\x84\xa2\xec\x75\x89\xfe\x10\x05\x08\xa5\x1d\xda\xb6\xaa\xd1\x87\xd4\xa9\xb1\xc5\xa8\xdd\xbb\xc4\x63\xa1\x1c\xe6\x36\xf1\xce\x83\x9e\x04\x99\x04\xce\x15\x2c\x39\xf9\x92\x48\x89\xd2\x0c\x25\x6a\x14\x42\x2e\x34\x4f\x5d\x4a\x76\x9a\x79\x64\xcb\x0c\xf4\x12\x91\xb7\xb6\x3a\x03\x0d\x81\x07\xce\x5f\xdf\xb7\x05\xda\xb0\x75\xd7\x5a\xa3\x1d\x56\x8f\xd1\x53\x17\x5d\xe6\xbd\xbc\xbf\xbd\xf9\x55\xd9\x1c\x3b\x6c\x5d\xa7\xa2\x13\x95\xee\x50\xa7\x05\x4c\xde\xeb\xff\x8b\x4c\x87\x9e\xba\xd1\xab\x16\xb7\x5d\x55\xe3\xb5\xbe\x34\xba\x11\xe9\x26\xe7\x4a\x29\x73\xb4\x6a\x53\xec\x87\x61\x5b\x4e\x74\xd0\xaa\x9b\x14\x0c\x9c\x59\xb3\xa7\x11\x3d\x0a\x91\x5b\xc8\xc2\x24\xfc\x9e\x4c\x2a\xc0\x4e\xd1\x47\x2b\x8d\xb8\x2c\x70\xd6\x60\x8b\x16\x22\xb4\xbc\xec\x0c\xa1\x28\x38\x3f\x75\x4b\x9c\xf6\xdf\xca\xc6\x31\xc3\xd2\x20\x9c\xb5\xa6\x47\x58\xe3\xc1\x89\x62\xde\x89\xd9\xf7\x82\x1e\xa5\xf8\xc0\x19\x1b\x64\x32\x7b\x49\x75\xa5\x45\x44\x28\x38\x7b\x81\xf7\x92\x38\x3b\x7a\x1e\x60\x05\xd5\x76\x8b\xba\x11\xe9\xad\xb0\x66\x5f\x70\x36\x77\xd9\xbc\x81\x85\x4d\x87\x51\xbc\xd2\x41\x82\x3f\xf3\x1e\xe6\x59\x70\xd2\x03\xb9\x77\xf7\x30\xf2\x4c\x2e\xe6\xec\xe2\x02\x1e\x77\xe4\x80\x1e\x76\x0e\x94\x83\xc6\xec\x35\xec\x95\x7b\x00\x6d\xf2\xe3\x20\x39\xb3\x93\x78\xd3\xdc\x62\x55\xfb\x9f\x91\xdb\x61\xe6\x3d\xbb\x21\xff\xca\x5a\x51\x7c\x7e\x8b\x59\xa6\x75\xcf\xff\x02\xff\x17\x00\x00\xff\xff\x81\xe0\x38\xe1\xe3\x06\x00\x00"),
		},
		"/repo.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "repo.tmpl",
			modTime:          time.Date(2019, 7, 19, 21, 6, 17, 739368144, time.UTC),
			uncompressedSize: 5037,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x6d\x6f\xdb\x38\x12\xfe\x2c\xfd\x8a\x59\xed\x62\x2b\xb5\xaa\xdc\x02\x8b\xfd\xe0\x6e\x36\xd7\xa6\x69\x2f\xb8\x34\x4d\x6b\x5f\xaf\x40\x51\x2c\x18\x69\x6c\xf3\x22\x93\x2a\x49\x39\x71\x04\xfd\xf7\xc3\x90\xd4\x8b\x1d\x67\x7b\x87\xdb\xa2\x70\x4c\x72\xe6\x99\xf7\xe1\xd0\x93\x09\x5c\xb2\xfc\x9a\x2d\x11\x9a\x26\xbb\xbc\x5e\x5e\xb0\x35\xb6\x2d\x70\x0d\x6f\x51\xa0\x62\x06\x0b\xb8\xda\x82\x40\x2c\x4a\x4b\x73\x61\xbf\x7d\x42\xa5\xb9\x14\x6d\x9b\xc2\xeb\xf7\x70\xf1\x7e\x0e\x27\x7f\x7f\x79\xf1\xf6\x34\x0b\xab\x03\x70\x61\xc8\xd7\x95\x54\x06\xe2\x30\x88\x72\x29\x0c\xde\x9a\x28\x0c\xa2\x82\x19\x76\xc5\x34\x4e\xf4\xb7\x92\xd6\xda\x28\x2e\x96\x9a\xbe\x1a\xbe\xc6\x28\x04\x00\x88\x16\x6b\xe3\xbf\x29\x5c\x94\x98\x77\x2b\x6d\x54\x2e\xc5\xc6\xaf\x50\x29\xa9\x74\xb7\x10\xb9\x2c\xb8\x58\x4e\xfe\xad\xa5\x88\xc2\x24\x0c\x27\x13\xd2\xe8\x4c\x18\x54\x0b\x96\xa3\x37\xf3\x29\xac\x19\x17\xc0\xbb\xed\x2c\x34\xdb\x0a\x0f\x51\xf6\x24\xd0\x84\x4d\xa3\x98\x58\x22\x0c\x44\x33\xbe\x14\xcc\xd4\x0a\x75\xdb\x86\x4d\xf3\x14\x32\xfb\x17\x45\xd1\xb6\x56\xa3\x93\x15\xe6\xd7\x71\x6e\x6e\xc1\x9b\x9f\x9d\xb8\xbf\x09\x58\xc5\xc3\x36\xec\x45\x7f\xc4\x4a\x7a\xa9\xda\xa8\x3a\x37\xd0\x84\x41\xce\xf2\x15\xc2\x09\x7d\x5a\x40\xbc\xc5\x1c\xe0\xf5\xab\xd3\x5b\xcc\x6b\x83\x16\x60\x32\x81\x0b\xbc\x39\x68\xa6\xe0\x25\x38\x08\x2e\x0a\x9e\x33\x83\x1a\x84\xb4\x3b\x59\xb8\xa8\x45\x7e\x98\x33\xce\x9d\xc8\xd4\xc9\x1b\xc4\x25\x87\x7c\xd4\x84\x81\x42\x53\x2b\x01\x3f\xef\x98\xd1\x58\x39\x53\xc8\x1d\xcc\xd4\x7e\xb6\x5e\x63\xbe\xae\x4a\x5c\xa3\x30\xcc\x70\x29\xb2\xb0\x69\xb2\x77\x8c\x8b\x99\xb5\x9c\x52\xc7\x6a\x17\xeb\x5d\xcf\x24\xdf\xf5\x28\x34\xd6\x4f\xda\xac\x8d\x86\xe9\x11\x7c\xf9\xea\xb2\x6b\x14\xbe\x99\x61\xc6\x8a\xee\xa3\xf6\x89\x29\x87\x9f\xee\x44\xaf\x0d\x83\x85\x54\xf0\x47\x0a\x1b\x82\x72\xec\x0e\xb9\x09\x83\x00\x95\xa2\x6d\x52\x34\xa6\x5d\x70\x92\x06\x45\x82\x20\xd0\x26\x05\x4f\xa7\x33\xb2\x3f\xbb\x54\x58\x31\x85\x64\x42\x0a\x9b\x84\x88\xf8\xc2\xd2\xfc\x70\x64\xe3\x65\xf9\x3a\x8f\xa2\x52\xb4\x6c\xe9\xa3\xc0\x05\x2a\xd0\x26\x3b\x29\xa5\xc6\xd8\xb2\x7a\x32\xc1\xcb\x30\x08\xda\xd8\xe2\x1d\x80\xdb\x41\x6b\x43\xfa\x3f\xe2\x6c\xc3\xc1\x39\x1f\x6a\x54\xdc\xe7\xf3\x38\x9b\x07\x8a\x77\xb5\x8b\xd9\x01\x9a\xc9\x64\x32\x81\xd9\x87\x73\x18\x5c\x4c\xb1\x9e\xb3\xab\x12\x61\x96\xaf\x70\xcd\xc2\x0d\x53\x70\xa2\x90\x19\xb4\xdb\x33\x72\xdc\x11\x44\x4d\x93\xb9\xb5\xa5\x6a\xdb\xc8\x66\x49\x2f\x0b\x98\x28\xe0\x9b\xd3\x8d\x24\xe8\xec\x81\x78\x12\x7c\xd3\x0c\x11\xf5\xd8\xa7\x3a\x67\x15\x16\xb3\x0f\xe7\x04\xbd\xab\xf0\x3b\xae\x73\x58\x61\x59\xa1\xd2\xae\x1a\xdf\x57\x24\x74\x54\x86\x9b\xa1\x11\x34\x36\x83\x6d\x76\xce\x6f\xa9\x2e\xe2\x7b\x35\xe2\xd9\x87\xba\x70\x1b\xcd\x66\x0a\xc6\xb2\xf8\xf5\xa8\x2a\xda\xbe\x13\x8c\x29\x46\x1a\xec\x09\xe9\x75\xb0\x75\x7a\x21\x3f\x22\x2b\xe2\x3f\x95\x6c\x8b\xd1\x2f\x85\x54\xc8\x8a\x29\x18\x55\xe3\x48\xf4\x88\x64\x24\xd9\x11\xc3\x95\x94\xa5\xaf\x5d\x21\x4b\x2e\xcc\x14\x6a\x51\x6b\x2c\x1e\xaa\xd4\x25\x1a\xeb\x1e\x59\xb9\x08\x7e\xf9\xea\xa0\x93\x91\x19\x84\xef\x4b\xcc\x91\x0d\x75\xd6\xb1\x51\xfe\xea\x1b\x6e\xf2\x95\xab\x42\xb7\x9f\x6d\xb2\x98\x74\x4e\xec\x79\xce\xf4\xae\xe3\xa6\xa3\xa4\xdf\xd8\xba\xdb\xcf\x7b\x57\x8d\xff\x93\x41\x5c\x8f\x9d\x7d\xdf\x2c\xf2\xd0\x5f\x69\xd0\x28\x1c\xbb\xf6\xb8\x88\xec\x5b\xb4\x60\xa5\xc6\xb0\x4b\x6a\xa8\x0d\x2f\x6d\xf5\x29\xac\x4a\xba\xc0\xcc\x0a\x21\x3e\x4e\x34\x18\x09\xf1\x71\x7a\x9c\x1e\x67\x59\x96\xe8\x0c\xe6\x2b\x04\x51\xaf\xaf\x50\x81\x5c\xc0\x31\x0d\x01\x7f\xab\x40\xdf\x11\xf3\xe7\xcf\x9f\xe3\x6d\xbd\xe6\x22\x99\xc2\x0d\x42\xad\x11\x1c\xda\x4a\x96\x05\x2a\xc2\xea\xf0\x17\x5c\x51\xb7\x33\x12\xd8\x46\xf2\x02\x14\xb2\x12\xa4\xb0\x42\xfd\x65\xe3\x49\xcf\xc4\x89\x14\x45\xac\xbf\x95\xbe\x65\xa6\xa0\xef\x20\xcb\x32\x2e\x4c\x02\x71\xb7\x67\xdb\xa8\xf5\x47\x2e\x85\x36\x50\x72\x6d\x2e\x89\xdf\xc9\x9e\x6d\xd7\x57\xb2\xa4\xfa\xfe\xe9\xc7\xf3\x1f\x7f\x8a\xc2\x80\x00\x8f\x3c\xa4\xa6\xd0\x11\x31\x89\x49\x21\x8a\x8f\x93\x28\x3d\x0c\x91\x42\x89\x22\xd6\x77\x49\xd2\xc7\x8e\xe8\xf4\xdd\xa8\xe9\xdf\xf9\x7b\x85\xfe\xf1\x45\x77\x7e\x74\x04\xcf\x46\x07\xf4\xaf\x4b\x2f\x12\x7a\xaa\xd4\xe9\xba\x32\xdb\x73\xae\xcd\x4b\xb5\xec\xe9\xa8\x9b\x53\x9f\xba\xaa\xb9\x75\x62\xa7\xf1\x2b\xb7\x76\x2d\xdc\x8b\xf8\xdd\x4a\x08\x82\xc0\x13\x67\xff\x52\xdc\xe0\xcc\x72\xc4\x51\x1c\x25\x0f\x9e\x1d\xbb\x33\xb2\x88\x93\x25\xcf\x5f\x00\x87\xdf\x3c\xee\x0b\xe0\x4f\x9e\xf8\xab\xe6\x20\x77\xea\xd9\xdb\x07\xf1\x13\x4b\x40\xe7\x7f\xe2\xf7\x07\x1c\xde\x01\x7a\xac\x24\x85\xe7\xc9\x4e\x75\x12\xaf\xbf\x9a\x26\x13\xd0\x75\x65\xe7\xc8\x79\xcc\x85\xf9\xf5\x97\x14\x16\xa5\x64\xf6\x4b\x97\x2b\x54\x7b\x29\xd0\xf4\x98\xcd\xf9\x1a\x93\x14\x1e\xcf\x53\xf8\xf2\x75\x9e\xda\x9b\xe3\xf1\x97\xaf\x73\x9f\x83\x1b\x56\xd6\x38\x97\x5e\x32\x17\x55\x6d\xc6\xcd\x3d\xf1\x90\xb6\xeb\xb3\xd2\xa6\x80\x1b\x3f\xb3\x4f\xc4\xf9\x7e\xe1\x78\x92\x90\x82\xf4\xc3\x86\x95\xd9\x99\xfe\xc4\x4a\x4e\xed\x97\xfc\xe9\x2d\x88\x7e\x13\xbc\xfc\x3d\xb2\x46\x75\xd5\xce\xca\xec\x1f\x5c\x78\x42\x5b\xe2\x1d\xf4\x99\x33\x6b\xb4\x9c\x0e\x50\x7e\xe0\xcd\xde\x48\xb5\x66\xe6\x4c\x98\xd8\x4a\x15\xc6\xfa\xed\x59\xb2\x87\xf5\xc6\xf9\xe6\x41\x00\x7b\x6e\x21\xdc\xb7\x24\x85\x47\xcb\x47\x29\x3c\x7d\x9e\xc2\xaf\xbf\xec\xa3\x39\x3f\x8d\xc0\x88\xb1\x0b\xdb\x1e\xed\x2b\x29\xcb\xa9\xcb\x5e\xa2\xa2\xa5\x77\x4a\xef\x15\xba\x71\x22\x9f\x36\xdd\x9e\x6d\x5c\xd1\x1e\xd6\xa5\x51\x23\xa8\x33\x7d\xc1\xef\x61\x75\x1e\x1e\x83\xed\x46\x97\x58\x4f\x4b\x5c\xc7\xc9\x30\xb4\xc6\xc9\xbe\xda\x2f\x95\x62\xdb\xc1\xf9\xb3\x92\xe7\x48\xb2\x6d\x77\xde\x30\x9a\xac\xb4\xb1\x23\x5c\xd4\x90\xb8\xbe\xa2\x9e\xb9\x8a\xda\x64\xe7\x28\xe2\x64\x54\x52\x7c\x01\x7c\xa8\x5c\xcb\xfd\xe4\x08\xa2\x14\xa2\xbe\xa4\xfc\xde\x9e\xbe\xd9\x99\x28\xf0\x36\xe6\xfb\xfa\xba\x32\xf3\x30\x6d\xb4\x13\xda\xfb\x01\xab\x73\x9b\x3e\xdc\xeb\x3f\xc6\x72\x2e\x35\x29\xc8\x6b\x3a\xe5\x59\x3c\xd4\xcc\x0b\xda\x1c\x7b\xf8\x7e\xe2\x99\xec\x9f\x82\xdf\xf6\x79\x67\xd5\xaa\x98\xe0\x79\x1c\xed\x58\x42\x57\xa9\x2f\x5a\x2c\xba\x59\x22\x82\x27\x56\x9d\xf9\xb6\xc2\x38\xe9\x93\x28\x09\x69\xb2\x65\x75\x69\x95\x3e\x8c\x96\x33\xf1\xc8\x40\xa5\xb8\x30\x60\x47\x95\x87\xb1\xec\x38\x43\xdd\xf5\x0f\x38\x82\xc5\xda\x64\x33\xcb\x16\x47\x51\xd2\x6f\x5b\x9b\x2f\xe4\x4d\x3c\x6c\x75\xdd\xeb\x44\xae\xed\x78\x1e\x51\xb4\x46\x2c\x3f\xeb\x6f\x65\xf6\x51\xde\xe8\xa6\xed\xf7\xba\x17\xc8\x2b\x96\x5f\x2f\x95\xac\xa9\xb4\xfb\x43\x7a\x82\x66\x1f\xd9\xcd\x3b\xd4\x9a\x2d\x69\x6c\x74\x17\x73\x81\x15\x8a\x02\x45\xbe\x1d\xda\x8e\xbd\xa7\xf7\x6e\x0b\xa8\x98\xd6\xd4\x88\x98\x00\xa4\x7d\xdb\x4b\x81\xa9\x65\x4d\xb3\x2e\x30\x03\xaa\x16\xd6\x12\x2b\x73\x9f\xfd\xc8\xdd\x9f\x3a\xbb\xc0\x9b\x38\xda\x3b\x8d\xdc\xd3\xf8\x92\x69\x3d\x5f\x29\x59\x2f\x57\x6f\xa8\x37\x72\x6d\xa7\x04\xea\x93\x76\x76\x31\x2b\x66\x60\xc5\x8d\xdb\x2e\xae\xfc\x3b\x79\x9f\xcd\xbf\x81\x12\x88\x47\x8d\xb4\xbb\xbf\xad\xa0\x13\xf7\x06\x75\x38\xc3\x9b\xda\xe2\xd3\x96\x7b\xa3\x96\x6c\x8b\x0a\xd6\xb5\xa6\xa7\x14\x33\x5c\x2f\xb6\x5e\xa2\xe7\x1f\x3d\xc6\x83\xb7\x68\x0e\x3d\x03\x53\xb8\xc6\x6d\x7f\x2d\x6c\x2c\xf7\x58\xab\x30\x08\x8c\x29\x5d\x06\xbc\xae\x95\x7d\x5d\xa4\xb0\xd8\xb7\x29\x05\x21\x9d\x50\xba\x59\x1e\xb2\x2c\x98\xfd\x57\x4a\xb0\x72\x47\x05\xb8\xa7\x40\x02\x71\x07\x49\xf3\xc1\x99\xd8\xd0\x85\xc2\x0c\x7e\x0f\x7c\xf4\x33\xc2\x64\x32\x9e\xab\x6f\x14\xab\x34\x18\xc5\x84\x66\x2e\x96\x74\x0d\x0a\x29\x9e\x8e\xf7\x8a\x2b\xc8\x59\x59\xfa\x57\xcf\x88\x7d\xc7\xd3\x23\x75\x5c\x9c\x3b\xa9\x01\x3d\x16\xb7\x87\x75\xac\x45\xe5\x1e\xba\x45\xef\x07\xa6\x96\xda\x4f\x79\xc3\x6d\x1b\x3f\xee\x0a\xab\x77\x6b\x60\x9f\x0d\xff\x1f\xaa\x05\x45\x5d\x97\xa6\x87\x25\xcf\x8e\x1e\xdf\xf7\xc1\xe9\x79\x39\x38\xd6\x29\x46\xcf\xd3\x1e\xc1\x79\x59\xc9\x9b\x59\xce\x84\x20\x37\xe9\xe1\x77\x0c\xf7\x83\x99\x37\xc6\x7a\xbb\x33\xcc\x79\x77\xcc\x36\xf6\x2e\x6d\xc6\x05\x6a\x73\xcf\x88\x2e\xb4\xff\x09\x00\x00\xff\xff\xb3\x16\xd0\x12\xad\x13\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/mutationfunc.tmpl"].(os.FileInfo),
		fs["/queryfunc.tmpl"].(os.FileInfo),
		fs["/repo.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
